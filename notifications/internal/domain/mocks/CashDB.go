// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "route256/notifications/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// CashDB is an autogenerated mock type for the CashDB type
type CashDB struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, req
func (_m *CashDB) Get(ctx context.Context, req domain.NotificationHistoryRequest) ([]domain.NotificationMem, bool, error) {
	ret := _m.Called(ctx, req)

	var r0 []domain.NotificationMem
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationHistoryRequest) ([]domain.NotificationMem, bool, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationHistoryRequest) []domain.NotificationMem); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NotificationMem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.NotificationHistoryRequest) bool); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.NotificationHistoryRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Set provides a mock function with given fields: ctx, req, value
func (_m *CashDB) Set(ctx context.Context, req domain.NotificationHistoryRequest, value []domain.NotificationMem) error {
	ret := _m.Called(ctx, req, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationHistoryRequest, []domain.NotificationMem) error); ok {
		r0 = rf(ctx, req, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCashDB creates a new instance of CashDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCashDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *CashDB {
	mock := &CashDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
