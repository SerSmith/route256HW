// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "route256/checkout/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddToCartDB provides a mock function with given fields: ctx, user, sku, count
func (_m *Repository) AddToCartDB(ctx context.Context, user int64, sku uint32, count uint16) error {
	ret := _m.Called(ctx, user, sku, count)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint32, uint16) error); ok {
		r0 = rf(ctx, user, sku, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFromCartDB provides a mock function with given fields: ctx, user, sku, count
func (_m *Repository) DeleteFromCartDB(ctx context.Context, user int64, sku uint32, count uint16) error {
	ret := _m.Called(ctx, user, sku, count)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint32, uint16) error); ok {
		r0 = rf(ctx, user, sku, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCartDB provides a mock function with given fields: ctx, user
func (_m *Repository) GetCartDB(ctx context.Context, user int64) ([]domain.ItemOrder, error) {
	ret := _m.Called(ctx, user)

	var r0 []domain.ItemOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]domain.ItemOrder, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.ItemOrder); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ItemOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartQauntDB provides a mock function with given fields: ctx, user, sku
func (_m *Repository) GetCartQauntDB(ctx context.Context, user int64, sku uint32) (uint16, error) {
	ret := _m.Called(ctx, user, sku)

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint32) (uint16, error)); ok {
		return rf(ctx, user, sku)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint32) uint16); ok {
		r0 = rf(ctx, user, sku)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, uint32) error); ok {
		r1 = rf(ctx, user, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
