version: "3.3"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 3
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
  kafka1:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    depends_on:
      - zookeeper
    ports:
      - "9091:9091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: LISTENER_INT://kafka1:29091,LISTENER_EXT://0.0.0.0:9091
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INT://kafka1:29091,LISTENER_EXT://localhost:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ZOOKEEPER: zookeeper:2181
    command: sh -c "((sleep 15 && kafka-topics --create --if-not-exists --bootstrap-server kafka1:29091 --partitions 3 --replication-factor 1 --topic StatusChange)&) && /etc/confluent/docker/run ">
  kafka2:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENERS: LISTENER_INT://kafka2:29092,LISTENER_EXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INT://kafka2:29092,LISTENER_EXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ZOOKEEPER: zookeeper:2181
  kafka3:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_LISTENERS: LISTENER_INT://kafka3:29093,LISTENER_EXT://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INT://kafka3:29093,LISTENER_EXT://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ZOOKEEPER: zookeeper:2181
  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alerts.yml:/etc/prometheus/alerts.yml
    extra_hosts:
      - host.docker.internal:host-gateway
  grafana:
    image: grafana/grafana-oss
    ports:
      - 3000:3000
    volumes:
      - ./data:/var/lib/grafana
    links:
      - prometheus
  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686 # web
      - 14268:14268
      - 9411:9411
  postgres_loms:
    image: postgres:15.1
    environment:
      POSTGRES_DB: loms
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      PGDATA: "/var/lib/postgresql/data/pgdata"
      PGPORT: 5432
    volumes:
      - .:/var/lib/postgresql/data/loms
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d loms"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
  postgres_checkout:
    image: postgres:15.1
    environment:
      POSTGRES_DB: checkout
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      PGDATA: "/var/lib/postgresql/data/pgdata"
      PGPORT: 5433
    volumes:
      - .:/var/lib/postgresql/data/checkout
    ports:
      - 5433:5433
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d checkout"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
  postgres_notifications:
    image: postgres:15.1
    environment:
      POSTGRES_DB: notifications
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      PGDATA: "/var/lib/postgresql/data/pgdata"
      PGPORT: 5434
    volumes:
      - .:/var/lib/postgresql/data/notifications
    ports:
      - 5434:5434
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d notifications"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
  redis:
    image: "redis:alpine"
    command: redis-server
    ports:
    - "6379:6379"
    volumes:
      - ./redis-data:/var/lib/redis
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    environment:
    - REDIS_REPLICATION_MODE=master
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
  checkout:
    image: checkout
    build: ./checkout/
    environment:
      PROMETHEUSADDR: ":8001"
    ports:
      - "50051:50051"
      - "8001:8001"
    depends_on:
      - postgres_checkout
    restart: unless-stopped
  loms:
    image: loms
    build: ./loms/
    environment:
      PROMETHEUSADDR: ":8002"
    ports:
      - "50052:50052"
      - "8002:8002"
    depends_on:
      - postgres_loms
      - kafka1
      - kafka2
      - kafka3
    restart: unless-stopped
  notification:
    image: notification
    build: ./notifications
    restart: unless-stopped
    ports:
      - "8089:8089"
    depends_on:
      - kafka1
      - kafka2
      - kafka3